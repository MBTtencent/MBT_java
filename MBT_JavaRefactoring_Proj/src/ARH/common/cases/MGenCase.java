/*
 * FileName: MGenCase.java
 * 
 * Description: create MGenCase class
 * 
 * History:
 * 1.0 MICKCHEN 2013-08-27 Create
 */


package ARH.common.cases;

import java.util.*;

import org.dom4j.*;

import ARH.common.config.*;
import ARH.common.view.*;
import ARH.framework.basic.*;
import ARH.framework.exception.*;
import ARH.framework.file.MFile;
import ARH.framework.logger.MLogMag;
import ARH.framework.xml.*;

/**
 * Test cases are generated by this class
 * @author MICKCHEN
 * @version 1.0
 */
public class MGenCase
{
    /**
     * Define view object 
     */
    private MViewBase viewBase;
    
    /**
     * Define case direction
     */
    private String dir;
    
    /**
     * Define Document object
     */
    private Document doc;
    
    /**
     * Define case name
     */
    private String caseName;
    
    /**
     * Define name map
     */
    private HashMap<Integer,String> nameMap;
    
    /**
     * Define variable path
     */
    private String varPath;
    
    /**
     * Define MBT XML path
     */
    private String mbtXmlPath;
    
    /**
     * Constructor
     * @param view view name
     * @param dir case direction
     * @throws MException if the view is null or case direction is not existed
     */
    public MGenCase(String view, String dir) throws MException
    {
        if (!MFile.isExisted(dir))
        {
            throw new MException("path[\"" + dir + "\"] is not exist.");
        }
        this.dir = dir;
        this.viewBase = MViewMag.getInsctance().getView(view);
        if (this.viewBase == null)
        {
            throw new MException("get \"" + view + "\" view error.");
        }
    }
    
    /**
     * run
     */
    public void run()
    {
        if (!this.genCase(this.doc, this.caseName, this.nameMap, this.varPath, this.mbtXmlPath))
        {
            MLogMag.getInstance().getLogger().info("Fail to generate Case '" + this.doc.getName()
                    + "'.");
        }
        else
        {
            MLogMag.getInstance().getLogger().info("Success to generate Cases '" + this.doc.getName()
                    + "'.");
        }
    }
    
    /**
     * Set document doc
     * @param doc
     */
    public void setDoc(Document doc)
    {
        this.doc = doc;
    }
    
    /**
     * Set case name
     * @param caseName
     */
    public void setCaseName(String caseName)
    {
        this.caseName = caseName;
    }
    
    /**
     * Set name map
     * @param nameMap
     */
    public void setNameMap(HashMap<Integer,String> nameMap)
    {
        this.nameMap = nameMap;
    }
    
    /**
     * Define variable path
     * @param varPath
     */
    public void setVarPath(String varPath)
    {
        this.varPath = varPath;
    }
    
    /**
     * Set MBT XML path
     * @param mbtXmlPath
     */
    public void setMbtXmlPath(String mbtXmlPath)
    {
        this.mbtXmlPath = mbtXmlPath;
    }
    
    /**
     * Parse case's XML and get information about the case
     * @param doc MBT XML document object
     * @param caseName the name of case file
     * @param MBT XML file 
     * @return true if generate case success, otherwise false
     */
    public boolean genCase(Document doc, String caseName, HashMap<Integer,String> nameMap,
            String varPath, String mbtXmlPath)
    {
        boolean res = true;
        
        try 
        {
            String content = genCaseContent(doc);
            
            this.viewBase.handleVars(content, varPath, caseName, nameMap, dir, mbtXmlPath);

//            res = this.viewBase.genCase(script, this.dir + "/" + 
//                    this.viewBase.setCaseName(caseName));
        } 
        catch (Exception e) 
        {
            MLogMag.getInstance().getLogger().warning(MBasicApi.getLineInfo() + 
                    e.getMessage());
            res = false;
        }
        
        return res;
    }
    
    /**
     * Generate case content
     * @param doc document object of the case's XML
     * @return content of case
     * @throws MException if document object is null
     */
    @SuppressWarnings("unchecked")
    private String genCaseContent(Document doc) throws MException
    {
        MXmlParse xmlParse = null;
        String content = "";
        
        xmlParse = new MXmlParse(doc);
        Element root = xmlParse.getRoot();
        Element name = xmlParse.getSubFirstElement(root, MCommonConfig.MBT_XML_NAME);
        String nameStr = xmlParse.getNodeData(name);
        
        content += this.viewBase.setCaseComment(nameStr);
        content += this.viewBase.setCaseStartLog(nameStr);
        
        Element testSteps = xmlParse.getSubFirstElement(root, MCommonConfig.MBT_XML_TEST_STEPS);
        List<Element> testStepList= xmlParse.getSubElement(testSteps, MCommonConfig.MBT_XML_TEST_STEP);
        
        for (int i = 0; i < testStepList.size(); i++)
        {
            Element testStep = testStepList.get(i);
            Element nameElement = xmlParse.getSubFirstElement(testStep, MCommonConfig.MBT_XML_NAME);
            
            String stepName = xmlParse.getNodeText(nameElement);
                //xmlParse.getAttrValue(testStep, MCommonConfig.MBT_XML_NAME);
            String stepNames = this.viewBase.setStepName(stepName);
            content += this.viewBase.setStepLog(i, stepNames);
            content += this.viewBase.setStepComment(i, stepNames);
            content += this.viewBase.setStepStartLog(i, stepNames);

            List<Element> actionList = xmlParse.getSubElement(testStep, MCommonConfig.MBT_XML_ACTION);
            
            for (int j = 0; j < actionList.size(); j++)
            {
                Element action = actionList.get(j);
                String actionStr = xmlParse.getNodeData(action);
                content += this.viewBase.setAction(actionStr);                
            }
            
            content += this.viewBase.setStepEndLog(i, stepNames);
        }
        
        content += this.viewBase.setCaseEndLog(nameStr);
        
        content = this.viewBase.setPreData() + content;
        
        content = this.viewBase.setContent(content);

        return content;
    }
}
